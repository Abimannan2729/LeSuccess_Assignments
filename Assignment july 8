//1. Generate parenthesis


class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res= new ArrayList();
        generate(res,n,0,0,"");
        return res;
    }
   public void generate(List<String> res,int n,int opencount,int closecount,String str){
     if(str.length()==n*2){
        res.add(str);
        return;
     }
     if(opencount<n){
        generate(res,n,opencount+1,closecount,str+"(");
     }
     if(closecount<opencount){
        generate(res,n,opencount,closecount+1,str+")");
     }
   }
}





//2.Combination Sum

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();

        makeCombination(candidates, target, 0, new ArrayList<>(), 0, res);
        return res;        
    }

    private void makeCombination(int[] candidates, int target, int idx, List<Integer> comb, int total, List<List<Integer>> res) {
        if (total == target) {
            res.add(new ArrayList<>(comb));
            return;
        }

        if (total > target || idx >= candidates.length) {
            return;
        }

        comb.add(candidates[idx]);
        makeCombination(candidates, target, idx, comb, total + candidates[idx], res);
        comb.remove(comb.size() - 1);
        makeCombination(candidates, target, idx + 1, comb, total, res);
    }    
}